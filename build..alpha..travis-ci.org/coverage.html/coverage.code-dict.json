{"/home/travis/build/npmtest/node-npmtest-mysql-events/test.js":"/* istanbul instrument in package npmtest_mysql_events */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mysql-events/lib.npmtest_mysql_events.js":"/* istanbul instrument in package npmtest_mysql_events */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mysql_events = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mysql_events = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mysql-events/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mysql-events && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mysql_events */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mysql_events\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mysql_events.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mysql_events.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mysql_events.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mysql_events.__dirname + '/lib.npmtest_mysql_events.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mysql-events/node_modules/mysql-events/index.js":"var ZongJi = require('zongji');\nvar _underScore = require('underscore');\n\nvar RETRY_TIMEOUT = 4000;\n\nfunction zongjiManager(dsn, options, onBinlog) {\n  var newInst = new ZongJi(dsn, options);\n    newInst.on('error', function(reason) {\n        newInst.removeListener('binlog', onBinlog);\n            setTimeout(function() {\n                  // If multiple errors happened, a new instance may have already been created\n                if(!('child' in newInst)) {\n                        newInst.child = zongjiManager(dsn, Object.assign({}, options, newInst.binlogNextPos\n                    \t    ? {  binlogName: newInst.binlogName,\n                        \t binlogNextPos: newInst.binlogNextPos\n                    \t      }\n                    \t    : {}\n                    \t), onBinlog);\n                        newInst.emit('child', newInst.child, reason);\n                        newInst.child.on('child', child => newInst.emit('child', child));\n              }\n          }, RETRY_TIMEOUT);\n    });\n    newInst.on('binlog', onBinlog);\n    newInst.start(options);\n    return newInst;\n}\n\nvar MySQLEvents = function(dsn, settings) {\n  var mySQLEvents = {\n    //Watching - to check whether the zongji.on() has been called or not\n    started: false,\n\n    //zongji instance\n    zongji: {},\n\n    //db list which are currenly watching\n    databases: [],\n\n    //table list, key will be dbname\n    tables: {},\n\n    //column list - 2D Array of objects, [dbname][table][column]\n    columns: {},\n\n    //events - unique list of events, thats passed to includeEvents to zongji\n    events: ['tablemap', 'writerows', 'updaterows', 'deleterows'],\n\n    //triggers - each MySQLEvents.add() generate an object, stored here\n    triggers: [],\n    \n    dsn,\n\n    //settings available - serverId, startAtEnd, binlogName, binlogNextPos, includeEvents, excludeEvents, includeSchema, excludeSchema\n    settings: settings || {},\n\n    //connect - instantiate an ZongJi Class\n    connect: function(dsn) {\n      if (!_underScore.isUndefined(dsn.host) &&\n        !_underScore.isUndefined(dsn.user) &&\n        !_underScore.isUndefined(dsn.password)\n      ) {\n        this.dsn = dsn;\n\n      }\n      else {\n        throw new Error('Error: MySQLEvents connect() needs host, user & password');\n      }\n    },\n\n    //Add a watcher\n    add: function(watchon, callback, columnValue) {\n\n      var trigger = {\n        trigger: watchon,\n        callback: callback\n      };\n      if (!_underScore.isUndefined(columnValue)) {\n        _underScore.extend(trigger, {\n          value: columnValue\n        });\n      }\n\n      this.triggers.push(trigger);\n      this.reload();\n\n      return trigger;\n    },\n\n    //unset watcher - this is the stop() method on the returned object of add() call\n    remove: function(trigger) {\n      this.triggers = _underScore.reject(this.triggers, function(obj) {\n        return _underScore.isEqual(obj, trigger);\n      });\n      this.reload();\n    },\n\n    //Stop all watchers\n    stop: function() {\n      this.zongji.stop();\n    },\n\n    //set the zongji includeSchema based on current watcher list\n    reload: function() {\n\n      var map = {\n        startAtEnd: true,\n        includeEvents: this.events,\n        includeSchema: this.includeSchema()\n      };\n      //override default settings\n      Object.assign(map, this.settings);\n\n      //check whether ZongJi started\n      if (!this.started) {\n        this.zongji = zongjiManager(this.dsn, map, function(evt) {\n          if (\n            evt.getEventName() === 'writerows' ||\n            evt.getEventName() === 'updaterows' ||\n            evt.getEventName() === 'deleterows'\n          ) {\n            //console.log(evt.getEventName());\n            //console.log(\"zongji ctrlConnection\", mySQLEvents.zongji.ctrlConnection.state);\n\n            var database = evt.tableMap[evt.tableId].parentSchema;\n            var table = evt.tableMap[evt.tableId].tableName;\n            var columns = evt.tableMap[evt.tableId].columns;\n            var oldRow = {};\n            var newRow = {};\n            var changedColumns = [];\n\n            _underScore.each(evt.rows, function(row) {\n              //console.log(row);\n              if (evt.getEventName() == 'writerows') {\n                oldRow = null;\n                newRow = {\n                  database: database,\n                  table: table,\n                  affectedColumns: columns,\n                  changedColumns: changedColumns,\n                  fields: row\n                };\n              }\n              if (evt.getEventName() == 'deleterows') {\n                newRow = null;\n                oldRow = {\n                  database: database,\n                  table: table,\n                  affectedColumns: columns,\n                  changedColumns: changedColumns,\n                  fields: row\n                };\n              }\n              if (evt.getEventName() == 'updaterows') {\n                //get the changed rows list\n                _underScore.each(row.before, function(val, key) {\n                  if (row.before[key] != row.after[key]) {\n                    changedColumns.push(key);\n                  }\n                });\n\n                oldRow = {\n                  database: database,\n                  table: table,\n                  affectedColumns: columns,\n                  changedColumns: changedColumns,\n                  fields: row.before\n                };\n                newRow = {\n                  database: database,\n                  table: table,\n                  affectedColumns: columns,\n                  changedColumns: changedColumns,\n                  fields: row.after\n                };\n              }\n\n              //call all database callbacks\n              var dbTriggers = _underScore.filter(mySQLEvents.triggers, function(t) {\n                return t.trigger == database;\n              });\n              _underScore.each(dbTriggers, function(dbTrigger) {\n                dbTrigger.callback.call(dbTrigger, oldRow, newRow, evt);\n              });\n\n              //call all database.table callbacks\n              var tblTriggers = _underScore.filter(mySQLEvents.triggers, function(t) {\n                return t.trigger == database + '.' + table;\n              });\n              _underScore.each(tblTriggers, function(tblTrigger) {\n                tblTrigger.callback.call(tblTrigger, oldRow, newRow, evt);\n              });\n\n              //call all database.table.column, database.table.column, database.table.column.value & database.table.column.regexp callbacks\n              _underScore.each(changedColumns, function(col) {\n                //value match\n                var colTriggers = _underScore.filter(mySQLEvents.triggers, function(t) {\n                  return ((t.trigger == database + '.' + table + '.' + col) || (t.trigger == database + '.' + table + '.' + col + '.value'));\n                });\n                _underScore.each(colTriggers, function(colTrigger) {\n                  if (_underScore.isUndefined(colTrigger.value)) {\n                    colTrigger.callback.call(colTrigger, oldRow, newRow, evt);\n                  }\n                  else if (row.after[col] == colTrigger.value) {\n                    colTrigger.callback.call(colTrigger, oldRow, newRow, evt);\n                  }\n                });\n                //regexp match\n                var colTriggers = _underScore.filter(mySQLEvents.triggers, function(t) {\n                  return t.trigger == database + '.' + table + '.' + col + '.regexp';\n                });\n                _underScore.each(colTriggers, function(colTrigger) {\n                  if (!_underScore.isUndefined(colTrigger.value) && colTrigger.value.test(row.after[col])) {\n                    colTrigger.callback.call(colTrigger, oldRow, newRow, evt);\n                  }\n                });\n              });\n            }); //rows\n          } //tablemap\n        });\n        this.zongji.on('error', function(err) {\n          //console.log(\"ZongJi error event\", err);\n        });\n\n        this.started = true;\n\n      }\n      else {\n        //reset the options\n        this.zongji.set(map);\n      }\n    },\n\n    includeSchema: function() {\n      var schema = {};\n\n      this.databases = [];\n      this.tables = {};\n      this.columns = {};\n\n      _underScore.each(this.triggers, function(trigger, i) {\n        if (!_underScore.isNull(trigger)) {\n          var watcher = trigger.trigger.split('.');\n\n          if (watcher.length == 1) {\n            if (_underScore.indexOf(mySQLEvents.databases, watcher[0]) == -1)\n              mySQLEvents.databases.push(watcher[0]);\n          }\n\n          if (watcher.length == 2) {\n            if (!_underScore.has(mySQLEvents.tables, watcher[0])) {\n              var map = {};\n              map[watcher[0]] = [];\n              _underScore.extend(mySQLEvents.tables, map);\n            }\n            mySQLEvents.tables[watcher[0]].push(watcher[1]);\n          }\n\n          if (watcher.length == 3) {\n            var map = {\n              type: 'value'\n            };\n\n            if (!_underScore.has(mySQLEvents.columns, watcher[0])) {\n              var db = {};\n              db[watcher[0]] = [];\n              _underScore.extend(mySQLEvents.columns, db);\n            }\n            if (!_underScore.has(mySQLEvents.columns[watcher[0]], watcher[1])) {\n              var table = {};\n              table[watcher[1]] = [];\n              _underScore.extend(mySQLEvents.columns[watcher[0]], table);\n            }\n            if (!_underScore.has(mySQLEvents.columns[watcher[0]][watcher[1]], watcher[2])) {\n              var col = {};\n              col[watcher[2]] = [];\n              _underScore.extend(mySQLEvents.columns[watcher[0]][watcher[1]], col);\n            }\n            mySQLEvents.columns[watcher[0]][watcher[1]][watcher[2]].push(map);\n          }\n\n          if (watcher.length == 4) {\n            if (watcher[3] == 'value' || watcher[3] == 'regexp') {\n              var map = {\n                type: watcher[3]\n              };\n            }\n            else {\n              var map = {\n                type: 'value'\n              };\n            }\n\n            if (!_underScore.has(mySQLEvents.columns, watcher[0])) {\n              var db = {};\n              db[watcher[0]] = [];\n              _underScore.extend(mySQLEvents.columns, db);\n            }\n            if (!_underScore.has(mySQLEvents.columns[watcher[0]], watcher[1])) {\n              var table = {};\n              table[watcher[1]] = [];\n              _underScore.extend(mySQLEvents.columns[watcher[0]], table);\n            }\n            if (!_underScore.has(mySQLEvents.columns[watcher[0]][watcher[1]], watcher[2])) {\n              var col = {};\n              col[watcher[2]] = [];\n              _underScore.extend(mySQLEvents.columns[watcher[0]][watcher[1]], col);\n            }\n            mySQLEvents.columns[watcher[0]][watcher[1]][watcher[2]].push(map);\n          }\n        }\n      });\n\n      _underScore.each(this.columns, function(val, db) {\n        if (!_underScore.has(schema, db)) schema[db] = [];\n        _underScore.each(val, function(table, i) {\n          if (_underScore.indexOf(schema[db], table) == -1) schema[db].push(table);\n        });\n      });\n\n      _underScore.each(this.tables, function(val, db) {\n        if (!_underScore.has(schema, db)) schema[db] = [];\n        _underScore.each(val, function(table, i) {\n          if (_underScore.indexOf(schema[db], table) == -1) schema[db].push(table);\n        });\n      });\n\n      _underScore.each(this.databases, function(db, i) {\n        if (!_underScore.has(schema, db)) schema[db] = true;\n      });\n\n      return schema;\n    }\n  }; //mySQLEvents\n\n  mySQLEvents.connect(dsn);\n  return mySQLEvents;\n};\n\nmodule.exports = MySQLEvents;"}